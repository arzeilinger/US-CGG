}
## change root.path as needed
root.path<-"C:\\Users\\tfens\\R_REPOS\\Flux_processing\\Concord_R_Code\\Concord_Post_Process\\"
#root.path<-"D:\\Housen\\Flux\\Data-exploring\\02_Concord_Eden\\"
post_filter.path <-paste0(root.path, "01_data\\07_Gap_Filled_Data\\") #combined post filter file that has precip, etc.
ver<-"combined_data"
out.path<-paste0(root.path, "02_output\\09_Energy_balance_closure\\")
## use follows to specify the versions of the combined file
# file name of the combined_file
cdata.file_post_filter <- paste("2023-10-17_eddy_met_cimis_gap_filled.csv")
post_filter <-
read.csv(
paste0(post_filter.path, cdata.file_post_filter, sep = ""),
header = T,
na.strings = "NA",
stringsAsFactors = F
)
colnames(post_filter) <-
colnames(read.csv(
paste(post_filter.path, cdata.file_post_filter, sep = ""),
header = T,
na.strings = "NA"
))
head(post_filter)
tail(post_filter)
post_filter$TIMESTAMP <- strptime(paste(post_filter$TIMESTAMP),
format = "%m/%d/%Y %H:%M",
tz = "Etc/GMT-8")
head(post_filter$TIMESTAMP)
#seeing which rows are duplicated
which(duplicated(post_filter$TIMESTAMP))
#removing duplicated rows
post_filter <-
post_filter[!duplicated(post_filter$TIMESTAMP),]
#checking that this worked
which(duplicated(post_filter$TIMESTAMP))
#gravimetric water content is volumetric/bulk density which is 1.35 grams per cm cubed or 1350 kg per meteris squared.
#"if you use g/cm3 then VWC = GWC x BD"
# Robert J. Lascano
# Professor - Soil Physics
# Texas Agricultural Experiment Station
# Texas A&M University - USDA - ARS
plot(post_filter$TIMESTAMP, post_filter$VWC_Avg)
post_filter$GWC = post_filter$VWC_Avg/1.35
plot(post_filter$TIMESTAMP, post_filter$GWC)
post_filter$Cs = 1350*(840 + post_filter$GWC*4181 )
plot(post_filter$Cs)
# Calculate temperature change for 30-minute intervals (1800 secs)
#0.1 is the depth we at which we are calculating heat storage.  using soil temperature at 5 cm, since we are calculating the heat storage between 0-10 cm. Soil temperature fluctuates even more with a shallow depth.
post_filter$heat_storage = ((post_filter$Cs*(c(NA, diff(post_filter$Soil_temp_Avg_GF_5cm, lag = 2), NA) / 2) * 0.1)) / 1800
plot(post_filter$TIMESTAMP, post_filter$heat_storage)
boxplot(post_filter$heat_storage,
ylab = "Heat storage",
main = "Boxplot of soil heat storage"
)
box_stats_heat_storage <-boxplot.stats(post_filter$heat_storage, coef = 3)$out
sort.int(box_stats_heat_storage) #where we get the below numbers
#remove soil heat storage outliers
post_filter$heat_storage[ post_filter$heat_storage > 94.80] <-NA
post_filter$heat_storage[ post_filter$heat_storage <  -129.48 ] <-NA
summary(post_filter$heat_storage)
plot(post_filter$heat_storage)
#visualizing outliers
post_filter$soil_heat_flux_1_2 = (post_filter$Correct_shf_1+post_filter$Correct_shf_2)/2
boxplot(post_filter$soil_heat_flux_1_2,
ylab = "soil heat flux",
main = "Boxplot of soil heat flux"
)
#identifying outliers
box_stats_soil_heat_flux <-boxplot.stats(post_filter$soil_heat_flux_1_2, coef = 3)$out
sort.int(box_stats_soil_heat_flux)#where we get the below numbers
#removing soil heat flux outliers
post_filter$soil_heat_flux_1_2[ post_filter$soil_heat_flux_1_2 > 91.57] <-NA
post_filter$soil_heat_flux_1_2[ post_filter$soil_heat_flux_1_2 <  -80.95 ] <-NA
summary(post_filter$soil_heat_flux_1_2)
plot(post_filter$soil_heat_flux_1_2)
#Plotting SH_f data to see gaps.
plot(post_filter$TIMESTAMP, post_filter$Correct_shf_1)
plot(post_filter$TIMESTAMP, post_filter$Correct_shf_2)
#Creating E_ng variable NR- (SHF + Soil Heat storage)
post_filter$E_ng = (post_filter$Correct_NR- (post_filter$heat_storage + post_filter$soil_heat_flux_1_2))
#Plotting E_ng variable
summary(post_filter$E_ng )
plot(post_filter$E_ng)
#Creatin LE + H non-gapfilled variable
post_filter$E_le_and_H =(post_filter$LE+post_filter$H)
summary(post_filter$E_le_and_H  )
plot(post_filter$E_le_and_H )
#par(New=TRUE)
#plot(post_filter$E_ng, post_filter$E_le_and_H,
# xlab=expression(Net~Radiation~minus~soil~heat~flux~'('~W~m^{-2}~')'),
#ylab= expression(Latent~and~Sensible~Heat~'('~W~m^{-2}~')'),
# main='')
#Energy balance combining first two years. coefficent =   0.757593
Both_years<-lm(post_filter$E_le_and_H[post_filter$TIMESTAMP > as.POSIXct("2019-10-31") & post_filter$TIMESTAMP < as.POSIXct("2021-11-01")]   ~ post_filter$E_ng[post_filter$TIMESTAMP > as.POSIXct("2019-10-31") & post_filter$TIMESTAMP < as.POSIXct("2021-11-01")]-1)
summary(Both_years)
#model coefficient outputs and summary  for both years
write.csv(tidy(Both_years),
paste(out.path,Sys.Date(),"coefs_both_year.csv",sep=""),
quote = T,
row.names = F)
write.csv(glance(Both_years),
paste(out.path,Sys.Date(),"model_both_year.csv",sep=""),
quote = T,
row.names = F)
#Energy balance for first year coeefficent =  0.704206
first_year<-lm(post_filter$E_le_and_H[post_filter$TIMESTAMP > as.POSIXct("2019-10-31") & post_filter$TIMESTAMP < as.POSIXct("2020-11-01")]   ~ post_filter$E_ng[post_filter$TIMESTAMP > as.POSIXct("2019-10-31") & post_filter$TIMESTAMP < as.POSIXct("2020-11-01")]-1)
summary(first_year)
#model coefficient outputs and summary  for first year
write.csv(tidy(first_year),
paste(out.path,Sys.Date(),"coefs_first_year.csv",sep=""),
quote = T,
row.names = F)
write.csv(glance(first_year),
paste(out.path,Sys.Date(),"model_first_year.csv",sep=""),
quote = T,
row.names = F)
#Energy balance second year coefficient 0.777506
second_year <- lm(post_filter$E_le_and_H[post_filter$TIMESTAMP > as.POSIXct("2020-10-31") & post_filter$TIMESTAMP < as.POSIXct("2021-11-01")]   ~ post_filter$E_ng[post_filter$TIMESTAMP > as.POSIXct("2020-10-31") & post_filter$TIMESTAMP < as.POSIXct("2021-11-01")]-1)
summary(second_year)
#model coefficient outputs and summary  for second year
write.csv(tidy(second_year),
paste(out.path,Sys.Date(),"coefs_second_year.csv",sep=""),
quote = T,
row.names = F)
write.csv(glance(second_year),
paste(out.path,Sys.Date(),"model_second_year.csv",sep=""),
quote = T,
row.names = F)
#Plotting energy balance closure
png(paste0(out.path,Sys.Date(),"Energy_balance_closure.png"))
scatter.smooth((post_filter$E_le_and_H[post_filter$TIMESTAMP > as.POSIXct("2019-10-31") & post_filter$TIMESTAMP < as.POSIXct("2021-11-01")]
~
post_filter$E_ng[post_filter$TIMESTAMP > as.POSIXct("2019-10-31") & post_filter$TIMESTAMP < as.POSIXct("2021-11-01")]-1) ,
xlab=expression(Net~Radiation~minus~soil~heat~flux~and~soil~heat~storage~'('~W~m^{-2}~')'),
ylab= expression(Latent~and~Sensible~Heat~'('~W~m^{-2}~')'),
main='',
cex.lab = 0.8)
dev.off()
scatter.smooth((post_filter$E_le_and_H[post_filter$TIMESTAMP > as.POSIXct("2019-10-31") & post_filter$TIMESTAMP < as.POSIXct("2021-11-01")]
~
post_filter$E_ng[post_filter$TIMESTAMP > as.POSIXct("2019-10-31") & post_filter$TIMESTAMP < as.POSIXct("2021-11-01")]-1) ,
xlab=expression(Net~Radiation~minus~soil~heat~flux~and~soil~heat~storage~'('~W~m^{-2}~')'),
ylab= expression(Latent~and~Sensible~Heat~'('~W~m^{-2}~')'),
main='',
cex.lab = 0.8,
col= "red",
cex= 1.2)
scatter.smooth((post_filter$E_le_and_H[post_filter$TIMESTAMP > as.POSIXct("2019-10-31") & post_filter$TIMESTAMP < as.POSIXct("2021-11-01")]
~
post_filter$E_ng[post_filter$TIMESTAMP > as.POSIXct("2019-10-31") & post_filter$TIMESTAMP < as.POSIXct("2021-11-01")]-1) ,
xlab=expression(Net~Radiation~minus~soil~heat~flux~and~soil~heat~storage~'('~W~m^{-2}~')'),
ylab= expression(Latent~and~Sensible~Heat~'('~W~m^{-2}~')'),
main='',
cex.lab = 0.8,
col= "grey",
cex= 1.2)
lm.scatter <- ggplot(post_filter, aes(x=E_ng[post_filter$TIMESTAMP > as.POSIXct("2019-10-31") & post_filter$TIMESTAMP < as.POSIXct("2021-11-01")], y=E_le_and_H[post_filter$TIMESTAMP > as.POSIXct("2019-10-31") & post_filter$TIMESTAMP < as.POSIXct("2021-11-01")])) +
geom_point(color='#2980B9', size = 4)  +
geom_smooth(method=lm, se=FALSE, fullrange=TRUE, color='#2C3E50') +
labs(title='Original Regression Line')
lm.scatter
lm.scatter <- ggplot(post_filter, aes(x=E_ng[post_filter$TIMESTAMP > as.POSIXct("2019-10-31") & post_filter$TIMESTAMP < as.POSIXct("2021-11-01")], y=E_le_and_H[post_filter$TIMESTAMP > as.POSIXct("2019-10-31") & post_filter$TIMESTAMP < as.POSIXct("2021-11-01")]) +
geom_point(color='#2980B9', size = 4)  +
geom_smooth(method=lm, se=FALSE, fullrange=TRUE, color='#2C3E50') +
labs(title='Original Regression Line'))
lm.scatter <- ggplot(post_filter, aes(x=E_ng[post_filter$TIMESTAMP > as.POSIXct("2019-10-31") & post_filter$TIMESTAMP < as.POSIXct("2021-11-01")], y=E_le_and_H[post_filter$TIMESTAMP > as.POSIXct("2019-10-31") & post_filter$TIMESTAMP < as.POSIXct("2021-11-01")])) +
geom_point(color='#2980B9', size = 4)  +
geom_smooth(method=lm, se=FALSE, fullrange=TRUE, color='#2C3E50') +
labs(title='Original Regression Line'))
lm.scatter <- ggplot(post_filter, aes(x=E_ng[post_filter$TIMESTAMP > as.POSIXct("2019-10-31") & post_filter$TIMESTAMP < as.POSIXct("2021-11-01")], y=E_le_and_H[post_filter$TIMESTAMP > as.POSIXct("2019-10-31") & post_filter$TIMESTAMP < as.POSIXct("2021-11-01")])) +
geom_point(color='#2980B9', size = 4)  +
geom_smooth(method=lm, se=FALSE, fullrange=TRUE, color='#2C3E50') +
labs(title='Original Regression Line')
lm.
lm.scatter
lm.scatter <- ggplot(post_filter, aes(x=E_ng[TIMESTAMP > as.POSIXct("2019-10-31") & TIMESTAMP < as.POSIXct("2021-11-01")], y=E_le_and_H[TIMESTAMP > as.POSIXct("2019-10-31") & TIMESTAMP < as.POSIXct("2021-11-01")])) +
geom_point(color='#2980B9', size = 4)  +
geom_smooth(method=lm, se=FALSE, fullrange=TRUE, color='#2C3E50') +
labs(title='Original Regression Line')
lm.scatter
lm.scatter <- ggplot(post_filter[TIMESTAMP > as.POSIXct("2019-10-31") & TIMESTAMP < as.POSIXct("2021-11-01")], aes(x=E_ng[TIMESTAMP > as.POSIXct("2019-10-31") & TIMESTAMP < as.POSIXct("2021-11-01")], y=E_le_and_H[TIMESTAMP > as.POSIXct("2019-10-31") & TIMESTAMP < as.POSIXct("2021-11-01")])) +
geom_point(color='#2980B9', size = 4)  +
geom_smooth(method=lm, se=FALSE, fullrange=TRUE, color='#2C3E50') +
labs(title='Original Regression Line')
lm.scatter <- ggplot(post_filter, aes(x=E_ng[TIMESTAMP > as.POSIXct("2019-10-31") & TIMESTAMP < as.POSIXct("2021-11-01")], y=E_le_and_H[TIMESTAMP > as.POSIXct("2019-10-31") & TIMESTAMP < as.POSIXct("2021-11-01")])) +
geom_point(color='#2980B9', size = 4)  +
geom_smooth(method=lm, se=FALSE, fullrange=TRUE, color='#2C3E50') +
labs(title='Original Regression Line')
lm.scatter
lm.scatter <- ggplot(post_filter, aesx=E_ng, y=E_le_and_H) +
geom_point(color='#2980B9', size = 4)  +
geom_smooth(method=lm, se=FALSE, fullrange=TRUE, color='#2C3E50') +
labs(title='Original Regression Line')
lm.scatter
lm.scatter <- ggplot(post_filter, aes(x=E_ng, y=E_le_and_H) +
lm.scatter <- ggplot(post_filter, aes(x=E_ng, y=E_le_and_H) +
geom_point(color='#2980B9', size = 4)  +
geom_smooth(method=lm, se=FALSE, fullrange=TRUE, color='#2C3E50') +
labs(title='Original Regression Line'))
lm.scatter
geom_smooth(method=lm, se=FALSE, fullrange=TRUE, color='#2C3E50')
lm.scatter <- ggplot(post_filter, aes(x=E_ng, y=E_le_and_H) +
lm.scatter <- ggplot(post_filter, aes(x=E_ng, y=E_le_and_H) +
geom_point(color='#2980B9', size = 4)  +
geom_smooth(method=lm, se=FALSE, fullrange=TRUE, color='#2C3E50'))
lm.scatter
energy_closure_int_zero <- ggplot(post_filter, aes(x= E_ng[post_filter$TIMESTAMP > as.POSIXct("2019-10-31") & post_filter$TIMESTAMP < as.POSIXct("2021-11-01")],
y=E_le_and_H[post_filter$TIMESTAMP > as.POSIXct("2019-10-31") & post_filter$TIMESTAMP < as.POSIXct("2021-11-01")]))+
geom_point()+
geom_smooth(method = "lm", formula = y ~ x - 1, se = FALSE, color = "blue")  # -1 removes the intercept
energy_closure_int_zero
energy_closure_int_zero <- ggplot(post_filter, aes(x= E_ng[TIMESTAMP > as.POSIXct("2019-10-31") & TIMESTAMP < as.POSIXct("2021-11-01")],
y=E_le_and_H[TIMESTAMP > as.POSIXct("2019-10-31") & TIMESTAMP < as.POSIXct("2021-11-01")]))+
geom_point()+
geom_smooth(method = "lm", formula = y ~ x - 1, se = FALSE, color = "blue")  # -1 removes the intercept
energy_closure_int_zero
energy_closure_int_zero <- ggplot(post_filter, aes(x= E_ng,
y=E_le_and_H))+
geom_point()+
geom_smooth(method = "lm", formula = y ~ x - 1, se = FALSE, color = "blue")  # -1 removes the intercept
energy_closure_int_zero
energy_closure_int_zero<- plot + geom_abline(intercept = 0, slope = 1, color = "red")
energy_closure_int_zero
energy_closure_int_zero <- ggplot(post_filter, aes(x= E_ng,
y=E_le_and_H))+
geom_point()+
geom_smooth(method = "lm", formula = y ~ x - 1, se = FALSE, color = "blue")  # -1 removes the intercept
energy_closure_int_zero
energy_closure_no_int <- ggplot(post_filter, aes(x= E_ng,
y=E_le_and_H))+
geom_point()+
geom_smooth(method = "lm", formula = y ~ x - 1, se = FALSE, color = "blue")  # -1 removes the intercept
energy_closure_no_int
energy_closure_int<- ggplot(post_filter, aes(x= E_ng,
y=E_le_and_H))+
geom_point()+
geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = "blue")
energy_closure_int
energy_closure_no_int <- ggplot(post_filter, aes(x= E_ng,
y=E_le_and_H))+
geom_point()+
geom_smooth(method = "lm", formula = y ~ x - 1, se = FALSE, color = "blue")  # -1 removes the intercept
energy_closure_no_int <- ggplot(post_filter, aes(x= E_ng,
y=E_le_and_H))+
geom_point()+
geom_smooth(method = "lm", formula = y ~ x - 1, se = FALSE, color = "blue")  # -1 removes the intercept
energy_closure_no_int
energy_closure_int<- ggplot(post_filter, aes(x= E_ng,
y=E_le_and_H))+
geom_point()+
geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = "blue")
energy_closure_int
energy_closure_no_int <- ggplot(post_filter, aes(x= E_ng,
y=E_le_and_H))+
geom_point()+
geom_smooth(method = "lm", formula = y ~ x - 1, se = TRUE, color = "red")  # -1 removes the intercept
energy_closure_no_int
energy_closure_no_int <- ggplot(post_filter, aes(x= E_ng,
y=E_le_and_H))+
geom_point()+
geom_smooth(method = "lm", formula = y ~ x - 1, se = FALSE, color = "red", theme_classic())  # -1 removes the intercept
theme_classic(energy_closure_no_int)
energy_closure_no_int <- ggplot(post_filter, aes(x= E_ng,
y=E_le_and_H))+
geom_point()+
geom_smooth(method = "lm", formula = y ~ x - 1, se = FALSE, color = "red")+theme_classic()  # -1 removes the intercept
energy_closure_no_int
energy_closure_no_int <- ggplot(post_filter[post_filter$TIMESTAMP > as.POSIXct("2019-10-31") & post_filter$TIMESTAMP < as.POSIXct("2021-11-01")], aes(x= E_ng,
y=E_le_and_H))+
geom_point()+
geom_smooth(method = "lm", formula = y ~ x - 1, se = FALSE, color = "red")+theme_classic()  # -1 removes the intercept
energy_closure_no_int <- ggplot(data = post_filter[which (post_filter$TIMESTAMP > as.POSIXct("2019-10-31") & post_filter$TIMESTAMP < as.POSIXct("2021-11-01")),], aes(x= E_ng,
y=E_le_and_H))+
geom_point()+
geom_smooth(method = "lm", formula = y ~ x - 1, se = FALSE, color = "red")+theme_classic()  # -1 removes the intercept
energy_closure_no_int
energy_closure_no_int <- ggplot(data = post_filter[which (post_filter$TIMESTAMP > as.POSIXct("2019-10-31") & post_filter$TIMESTAMP < as.POSIXct("2021-11-01")),], aes(x= E_ng,
y=E_le_and_H))+
geom_point()+
geom_smooth(method = "lm", formula = y ~ x - 1, se = FALSE, color = "red")+
theme_classic() +
xlab(expression(Net~Radiation~minus~soil~heat~flux~and~soil~heat~storage~'('~W~m^{-2}~')'))# -1 removes the intercept
energy_closure_no_int
energy_closure_no_int <- ggplot(data = post_filter[which (post_filter$TIMESTAMP > as.POSIXct("2019-10-31") & post_filter$TIMESTAMP < as.POSIXct("2021-11-01")),], aes(x= E_ng,
y=E_le_and_H))+
geom_point()+
geom_smooth(method = "lm", formula = y ~ x - 1, se = FALSE, color = "red")+
theme_classic() +
xlab(expression(Net~Radiation~minus~soil~heat~flux~and~soil~heat~storage~'('~W~m^{-2}~')'))+
ylab(expression(Latent~and~Sensible~Heat~'('~W~m^{-2}~')'))
energy_closure_no_int <- ggplot(data = post_filter[which (post_filter$TIMESTAMP > as.POSIXct("2019-10-31") & post_filter$TIMESTAMP < as.POSIXct("2021-11-01")),], aes(x= E_ng,
y=E_le_and_H))+
geom_point()+
geom_smooth(method = "lm", formula = y ~ x - 1, se = FALSE, color = "red")+
theme_classic() +
xlab(expression(Net~Radiation~minus~soil~heat~flux~and~soil~heat~storage~'('~W~m^{-2}~')'))+
ylab(expression(Latent~and~Sensible~Heat~'('~W~m^{-2}~')'))
energy_closure_no_int
energy_closure_int<- ggplot(post_filter, aes(x= E_ng,
y=E_le_and_H))+
geom_point()+
geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = "red")
energy_closure_int
png(paste0(out.path,Sys.Date(),"Energy_balance_closure.png"))
energy_closure_no_int
dev.off()
#Plotting the energy balance closure with the intercept.
energy_closure_int<-  ggplot(data = post_filter[which (post_filter$TIMESTAMP > as.POSIXct("2019-10-31") & post_filter$TIMESTAMP < as.POSIXct("2021-11-01")),], aes(x= E_ng,
y=E_le_and_H))+
geom_point()+
geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = "red")+
theme_classic() +
xlab(expression(Net~Radiation~minus~soil~heat~flux~and~soil~heat~storage~'('~W~m^{-2}~')'))+
ylab(expression(Latent~and~Sensible~Heat~'('~W~m^{-2}~')'))
energy_closure_int
#Generating a png file of the energy balance closure with intercept
png(paste0(out.path,Sys.Date(),"Energy_balance_closure_with_intercept.png"))
png(paste0(out.path,Sys.Date(),"Energy_balance_closure_with_intercept.png"))
energy_closure_int
dev.off()
#Generating a png file of the energy balance closure without an intercept
png(paste0(out.path,Sys.Date(),"Energy_balance_closure_no_int.png"))
energy_closure_no_int
dev.off()
rm(list=ls())
require(stringr)
require(zoo)
require(openair)
na.count<-function(x) sum(is.na(x))
na.mean<-function(x) ifelse(is.nan(mean(x,na.rm=T)),NA,mean(x,na.rm=T))
library(REddyProc)
library(car)
library(stringr)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(broom)
library(psych)
library(lme4)
library(dplyr)
library(lognorm)
SE <- function(x, na.rm=FALSE) {
if (na.rm) x <- na.omit(x)
sqrt(var(x)/length(x))
}
## change root.path as needed
root.path<-"C:\\Users\\tfens\\R_REPOS\\Flux_processing\\Concord_R_Code\\Concord_Post_Process\\"
#root.path<-"D:\\Housen\\Flux\\Data-exploring\\02_Concord_Eden\\"
post_filter.path <-paste0(root.path, "01_data\\07_Gap_Filled_Data\\") #combined post filter file that has precip, etc.
ver<-"combined_data"
out.path<-paste0(root.path, "02_output\\09_Energy_balance_closure\\")
## use follows to specify the versions of the combined file
# file name of the combined_file
cdata.file_post_filter <- paste("2023-10-17_eddy_met_cimis_gap_filled.csv")
post_filter <-
read.csv(
paste0(post_filter.path, cdata.file_post_filter, sep = ""),
header = T,
na.strings = "NA",
stringsAsFactors = F
)
colnames(post_filter) <-
colnames(read.csv(
paste(post_filter.path, cdata.file_post_filter, sep = ""),
header = T,
na.strings = "NA"
))
head(post_filter)
tail(post_filter)
post_filter$TIMESTAMP <- strptime(paste(post_filter$TIMESTAMP),
format = "%m/%d/%Y %H:%M",
tz = "Etc/GMT-8")
head(post_filter$TIMESTAMP)
#seeing which rows are duplicated
which(duplicated(post_filter$TIMESTAMP))
#removing duplicated rows
post_filter <-
post_filter[!duplicated(post_filter$TIMESTAMP),]
#checking that this worked
which(duplicated(post_filter$TIMESTAMP))
#gravimetric water content is volumetric/bulk density which is 1.35 grams per cm cubed or 1350 kg per meteris squared.
#"if you use g/cm3 then VWC = GWC x BD"
# Robert J. Lascano
# Professor - Soil Physics
# Texas Agricultural Experiment Station
# Texas A&M University - USDA - ARS
plot(post_filter$TIMESTAMP, post_filter$VWC_Avg)
post_filter$GWC = post_filter$VWC_Avg/1.35
plot(post_filter$TIMESTAMP, post_filter$GWC)
post_filter$Cs = 1350*(840 + post_filter$GWC*4181 )
plot(post_filter$Cs)
# Calculate temperature change for 30-minute intervals (1800 secs)
#0.1 is the depth we at which we are calculating heat storage.  using soil temperature at 5 cm, since we are calculating the heat storage between 0-10 cm. Soil temperature fluctuates even more with a shallow depth.
post_filter$heat_storage = ((post_filter$Cs*(c(NA, diff(post_filter$Soil_temp_Avg_GF_5cm, lag = 2), NA) / 2) * 0.1)) / 1800
plot(post_filter$TIMESTAMP, post_filter$heat_storage)
boxplot(post_filter$heat_storage,
ylab = "Heat storage",
main = "Boxplot of soil heat storage"
)
box_stats_heat_storage <-boxplot.stats(post_filter$heat_storage, coef = 3)$out
sort.int(box_stats_heat_storage) #where we get the below numbers
#remove soil heat storage outliers
post_filter$heat_storage[ post_filter$heat_storage > 94.80] <-NA
post_filter$heat_storage[ post_filter$heat_storage <  -129.48 ] <-NA
summary(post_filter$heat_storage)
plot(post_filter$heat_storage)
#visualizing outliers
post_filter$soil_heat_flux_1_2 = (post_filter$Correct_shf_1+post_filter$Correct_shf_2)/2
boxplot(post_filter$soil_heat_flux_1_2,
ylab = "soil heat flux",
main = "Boxplot of soil heat flux"
)
#identifying outliers
box_stats_soil_heat_flux <-boxplot.stats(post_filter$soil_heat_flux_1_2, coef = 3)$out
sort.int(box_stats_soil_heat_flux)#where we get the below numbers
#removing soil heat flux outliers
post_filter$soil_heat_flux_1_2[ post_filter$soil_heat_flux_1_2 > 91.57] <-NA
post_filter$soil_heat_flux_1_2[ post_filter$soil_heat_flux_1_2 <  -80.95 ] <-NA
summary(post_filter$soil_heat_flux_1_2)
plot(post_filter$soil_heat_flux_1_2)
#Plotting SH_f data to see gaps.
plot(post_filter$TIMESTAMP, post_filter$Correct_shf_1)
plot(post_filter$TIMESTAMP, post_filter$Correct_shf_2)
#Creating E_ng variable NR- (SHF + Soil Heat storage)
post_filter$E_ng = (post_filter$Correct_NR- (post_filter$heat_storage + post_filter$soil_heat_flux_1_2))
#Plotting E_ng variable
summary(post_filter$E_ng )
plot(post_filter$E_ng)
#Creatin LE + H non-gapfilled variable
post_filter$E_le_and_H =(post_filter$LE+post_filter$H)
summary(post_filter$E_le_and_H  )
plot(post_filter$E_le_and_H )
#par(New=TRUE)
#plot(post_filter$E_ng, post_filter$E_le_and_H,
# xlab=expression(Net~Radiation~minus~soil~heat~flux~'('~W~m^{-2}~')'),
#ylab= expression(Latent~and~Sensible~Heat~'('~W~m^{-2}~')'),
# main='')
#Energy balance combining first two years. coefficent =   0.757593
Both_years<-lm(post_filter$E_le_and_H[post_filter$TIMESTAMP > as.POSIXct("2019-10-31") & post_filter$TIMESTAMP < as.POSIXct("2021-11-01")]   ~ post_filter$E_ng[post_filter$TIMESTAMP > as.POSIXct("2019-10-31") & post_filter$TIMESTAMP < as.POSIXct("2021-11-01")]-1)
summary(Both_years)
#model coefficient outputs and summary  for both years
write.csv(tidy(Both_years),
paste(out.path,Sys.Date(),"coefs_both_year.csv",sep=""),
quote = T,
row.names = F)
write.csv(glance(Both_years),
paste(out.path,Sys.Date(),"model_both_year.csv",sep=""),
quote = T,
row.names = F)
#Energy balance for first year coeefficent =  0.704206
first_year<-lm(post_filter$E_le_and_H[post_filter$TIMESTAMP > as.POSIXct("2019-10-31") & post_filter$TIMESTAMP < as.POSIXct("2020-11-01")]   ~ post_filter$E_ng[post_filter$TIMESTAMP > as.POSIXct("2019-10-31") & post_filter$TIMESTAMP < as.POSIXct("2020-11-01")]-1)
summary(first_year)
#model coefficient outputs and summary  for first year
write.csv(tidy(first_year),
paste(out.path,Sys.Date(),"coefs_first_year.csv",sep=""),
quote = T,
row.names = F)
write.csv(glance(first_year),
paste(out.path,Sys.Date(),"model_first_year.csv",sep=""),
quote = T,
row.names = F)
#Energy balance second year coefficient 0.777506
second_year <- lm(post_filter$E_le_and_H[post_filter$TIMESTAMP > as.POSIXct("2020-10-31") & post_filter$TIMESTAMP < as.POSIXct("2021-11-01")]   ~ post_filter$E_ng[post_filter$TIMESTAMP > as.POSIXct("2020-10-31") & post_filter$TIMESTAMP < as.POSIXct("2021-11-01")]-1)
summary(second_year)
#model coefficient outputs and summary  for second year
write.csv(tidy(second_year),
paste(out.path,Sys.Date(),"coefs_second_year.csv",sep=""),
quote = T,
row.names = F)
write.csv(glance(second_year),
paste(out.path,Sys.Date(),"model_second_year.csv",sep=""),
quote = T,
row.names = F)
#Plotting energy balance closure
#Energy balance closure without a intercept
# -1 removes the intercept
energy_closure_no_int <- ggplot(data = post_filter[which (post_filter$TIMESTAMP > as.POSIXct("2019-10-31") & post_filter$TIMESTAMP < as.POSIXct("2021-11-01")),], aes(x= E_ng,
y=E_le_and_H))+
geom_point()+
geom_smooth(method = "lm", formula = y ~ x - 1, se = FALSE, color = "red")+
theme_classic() +
xlab(expression(Net~Radiation~minus~soil~heat~flux~and~soil~heat~storage~'('~W~m^{-2}~')'))+
ylab(expression(Latent~and~Sensible~Heat~'('~W~m^{-2}~')'))
energy_closure_no_int
#Generating a png file of the energy balance closure without an intercept
png(paste0(out.path,Sys.Date(),units="in", width=5, height=5, res=350,"Energy_balance_closure_no_int.png"))
energy_closure_no_int
dev.off()
#Plotting the energy balance closure with the intercept.
energy_closure_int<-  ggplot(data = post_filter[which (post_filter$TIMESTAMP > as.POSIXct("2019-10-31") & post_filter$TIMESTAMP < as.POSIXct("2021-11-01")),], aes(x= E_ng,
y=E_le_and_H))+
geom_point()+
geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = "red")+
theme_classic() +
xlab(expression(Net~Radiation~minus~soil~heat~flux~and~soil~heat~storage~'('~W~m^{-2}~')'))+
ylab(expression(Latent~and~Sensible~Heat~'('~W~m^{-2}~')'))
energy_closure_int
#Generating a png file of the energy balance closure with intercept
png(paste0(out.path,Sys.Date(),units="in", width=5, height=5, res=350, "Energy_balance_closure_with_intercept.png"))
energy_closure_int
dev.off()
dev.off()
png(paste0(out.path,Sys.Date(),units="in", width=10, height=10, res=350,"Energy_balance_closure_no_int.png"))
energy_closure_no_int
dev.off()
png(paste0(out.path,units="in", width=10, height=10, res=350,Sys.Date(),"Energy_balance_closure_no_int.png"))
energy_closure_no_int
dev.off()
png(units="in", width=10, height=10, res=350,paste0(out.path, Sys.Date(),"Energy_balance_closure_no_int.png"))
energy_closure_no_int
dev.off()
